'use strict';

var assert = require('assert');
var request = require('request');
var url = require('url');
var crypto = require('crypto');

var TuneWikiApiClient = function (options) {
    assert(options.hasOwnProperty('key'), 'requires api key');
    assert(options.hasOwnProperty('secret'), 'requires api secret');
    assert(options.hasOwnProperty('username'), 'requires username');
    assert(options.hasOwnProperty('password'), 'requires password');

    this.key = options.key;
    this.secret = options.secret;
    this.username = options.username;
    this.password = options.password;
};

var signRequest = function (method, pathname, query, secret) {
    // http://dev.tunewiki.com/api/apipass/
    // step 1
    var raw = method;
    // step 2
    raw += '\n' + pathname + '\n';
    // step 3
    for (var q in query) {
        raw += query[q];
    }
    // step 4 (no post data for get requests)
    // step 5
    var pass = crypto.createHmac('md5', secret).update(raw).digest('hex');
    return pass;
};

TuneWikiApiClient.prototype.get = function (path, language, cb) {
    var headers = {};
    if (typeof language === 'function') {
        cb = language;
    } else {
        headers['Accept-Language'] = language;
    }
    var currentTime = Math.round(new Date().getTime() / 1000);
    var pathname = url.parse(path).pathname;
    var qs = url.parse(path, true).query;
    qs.ts = currentTime;
    qs.apiKey = this.key;
    qs.username = this.username;
    qs.password = this.password;
    qs.apiPass = signRequest('GET', pathname, qs, this.secret);

    var requestUrl = url.format({
        protocol: 'http',
        hostname: 'twapi.tunewiki.com',
        pathname: pathname
    });
    request.get({
        url: requestUrl,
        qs: qs,
        json: true,
        headers: headers
    }, function (err, res, body) {
        cb(err, body);
    });
};

TuneWikiApiClient.prototype.post = function () {
    throw new Error('post not yet implemented');
};

module.exports = TuneWikiApiClient;