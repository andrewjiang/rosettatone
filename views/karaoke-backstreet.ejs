<!DOCTYPE HTML>
<html lang="en">
  
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link href="https://fonts.googleapis.com/css?family=Limelight|Flamenco|Federo|Yesteryear|Josefin Sans|Spinnaker|Sansita One|Handlee|Droid Sans|Oswald:400,300,700" media="screen" rel="stylesheet" type="text/css" />
    <link href="stylesheets/bootstrap.css" media="screen" rel="stylesheet" type="text/css" />
    <link href="stylesheets/bootstrap-responsive.css" media="screen" rel="stylesheet" type="text/css" />
    <link href="stylesheets/common.css" media="screen" rel="stylesheet" type="text/css" />
    <link href="stylesheets/fontawesome.css" media="screen" rel="stylesheet" type="text/css" />
    <link href="stylesheets/project.css" media="screen" rel="stylesheet" type="text/css" />
    <link href="stylesheets/karaoke.css" media="screen" rel="stylesheet" type="text/css" />
     <link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.no-icons.min.css" rel="stylesheet">
    <link href="http://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet">
    <script src="/assets/js/jquery.js"></script>
    <script src="jQuery.tubeplayer.js"></script>
    <script src="sitebackstreet.js"></script>
    <!-- Typekit fonts require an account and a kit containing the fonts used. see https://typekit.com/plans for details. <script type="text/javascript" src="//use.typekit.net/YOUR_KIT_ID.js"></script>
  <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
-->

<!--audio stuff-->

<script src="../audio/js/effect.js"></script>
  <script src="../audio/js/waveshaper.js"></script>
  <script src="../audio/js/jungle.js"></script>
  <script src="../audio/js/effects.js"></script>
  <script src="../audio/js/pingpong.js"></script>

  <!-- Visualizer stuff -->
  <script src="../audio/js/visualizer/events.js"></script>

  <!-- WebGL stuff -->
  <script src="../audio/js/visualizer/base.js"></script>
  <script src="../audio/js/visualizer/cameracontroller.js"></script>

  <!-- TODO(kbr): remove this dependency -->
  <script src="../audio/js/visualizer/matrix4x4.js"></script>

  <!-- Visualizer GL library -->
  <script src="../audio/js/visualizer/visualizer.js"></script>
  <script src="../audio/js/visualizer/shader.js"></script>

  <style>
  body { font: 14pt Arial, sans-serif; background: #ffffff; }
  select { font: 14pt Arial, sans-serif; }
  div#controls div { display:none; border: 1px solid gray; border-radius: 5px; padding: 10px; width: 728px;}
  div#controls div.display { display: block; }
  #controls { padding-top: 24px;}
  #effectMix { padding-top: 12px; background-color: #ecf0f1; margin-left:80px; margin-right: 80px; border-radius: 0px; border: 1px solid #3498db; margin-top:30px; padding-left: 30px; padding-right: 0px; padding-bottom: 10px ;opacity: 1}
</style>


    <title>Karaoke</title>
  </head>
  
  <body>
    <div id="absolute-wrapper">
      <img class="image">
    </div>
    <div class="navbar navbar-static-top">
      <div class="navbar-inner">
        <a class="brand" href="/">Rosetta
          <span>Tone</span>
        </a>
        <ul class="nav pull-right">
          <li>
            <a href="/yourlang"><strong>Sign Up</strong>
            </a>
          </li>
          <li>
            <a href="/yourlang">Login</a>
          </li>
        </ul>
      </div>
    </div>
    <div class="container container-1">


      <div class="container">
        <div id="thePlayer">
        </div>
        <div id="theFloater" style="height:440px; width:300px; background: #ffffff; opacity: 0.7; position: absolute; top: 20%; right: 20%; border-radius: 6px; overflow: scroll;">
          <div id="insideTheFloater" style="padding: 20px 20px 20px 20px;">

          </div>
        </div>
        <h1 class="heading heading-1 heading-3"><span id="lang1">Spanish Lyrics</span></h1>
        <h1 class="heading heading-1 heading-2"><span id="lang2">English Lyrics</span></h1>

      </div>
        <div class="container-fluid">
  <div id="effectMix">
            <div class="row-fluid">
              <a href="#"> <span class="span1"> <i id="prev" class="icon icon-caret-left pull-center"></i> 
                <p>Prev.</p> </a>
              </span>
              <span class="span10" style="padding-left:220px; margin-bottom:20px">
                <button class="btn" id="globalStart">Start Singing!</button>
                <button class="btn" id="globalPause">Take a Breather</button>
              </span>
               <a href="#"> <span class="span1"> <i id="next" class="icon icon-caret-right pull-center"></i> 
                <p>Next</p></a>
              </span>
            </div>

Effect: <select id="effect" onchange="changeEffect(this.selectedIndex);" style="height:35px;padding-bottom:6px;">
    <option>Delay </option>
    <option>Reverb </option>
    <option>Distortion </option>
    <option>Telephone </option>
    <option>Gain LFO </option>
    <option>Chorus </option>
    <option>Flange </option>
    <option>Ring mod </option>
    <option>Stereo Chorus </option>
    <option>Stereo Flange </option>
    <option>Octave Doubler </option>
    <option>Mod Delay </option>
    <option>Ping-pong delay</option>
    <option>LFO Filter</option>
    <option>Envelope Follower (testing only)</option>
    <option>Autowah</option>
    <option>Noise Gate</option>
    <option>Wah Bass</option>
    <option>Distorted Wah Chorus</option>
</select>
&nbsp;&nbsp;Effect Mix: <input type="range" min="0.0" max="1.0" step="0.01" value="0.4" style="height: 20px; width: 120px;" 
onInput="crossfade( event.target.value );">
&nbsp;&nbsp;Mono-ize input: <input type="checkbox" checked onchange="toggleMono()">
<!--          &nbsp;&nbsp;60Hz filter: <input type="checkbox" checked onchange="toggleFilter()"> -->
</div>
  <div style="visibility: hidden">
    <input type="radio" name="radioSet" value="data" 
    onmousedown="analyserView1.setAnalysisType(ANALYSISTYPE_FREQUENCY); analyserView2.setAnalysisType(ANALYSISTYPE_FREQUENCY);">Frequency
    <input type="radio" name="radioSet" value="data" 
    onmousedown="analyserView1.setAnalysisType(ANALYSISTYPE_SONOGRAM); analyserView2.setAnalysisType(ANALYSISTYPE_SONOGRAM);">Sonogram
    <input type="radio" name="radioSet" value="data" checked="checked" 
    onmousedown="analyserView1.setAnalysisType(ANALYSISTYPE_3D_SONOGRAM); analyserView2.setAnalysisType(ANALYSISTYPE_3D_SONOGRAM);">3D Sonogram
    <input type="radio" name="radioSet" value="data" 
    onmousedown="analyserView1.setAnalysisType(ANALYSISTYPE_WAVEFORM); analyserView2.setAnalysisType(ANALYSISTYPE_WAVEFORM);">Waveform
  </div>
      <canvas id="view1" width="750" height="0" style="visibility: hidden; position: fixed; top: 0px; left: 0px"></canvas><br>
  <canvas id="view2" width="750" height="0" style="visibility: hidden; position: fixed; top: 0px; left: 0px"></canvas>

<div id="controls" style="visibility: hidden">
  <div id="delayControls">A basic digital delay.<br>
    Delay time: <input id="dtime" type="range" min="0.01" max="3" step="0.01" value="0.15" style="height: 20px; width: 200px" onInput="if (dtime) dtime.delayTime.value = event.target.value;"><br>
    Regen: <input id="dregen" type="range" min="0.0" max="1.0" step="0.01" value="0.75" style="height: 20px; width: 200px;" 
    onInput="if (dregen) dregen.gain.value = event.target.value;">
  </div>
  <div id="reverbControls">A convolution-based "hall" reverb, using a generated impulse file. <!-- TODO: let user select other impulse response files, even auto-generate -->
  </div>
  <div id="distortionControls">A waveshaper, used to do distortion.  Note this will become more high-quality in the future, as we improve the antialiasing in waveshapers.<br>
    Drive: <input type="range" min="0.01" max="20" step="0.01" value="5" style="height: 20px; width: 200px;" 
    onInput="if (waveshaper) waveshaper.setDrive(event.target.value);">
  </div>
  <div id="telephoneControls">This effect pairs a low-pass and a high-pass filter to "telephonize" a sound - removing 
    the high and low frequencies.  <!-- TODO: put LP/HP cutoff controls here -->
  </div>
  <div id="gainLFOControls">This effect chops up the sound by using a low-frequency oscillator (LFO) to control the
    gain.<br>
    LFO type: 
    <select id="lfotype" onchange="if (lfotype) lfotype.type = parseInt(event.target.value);">
      <option selected="selected" value="0">SIN</option>
      <option value="1">SQUARE</option>
      <option value="2">SAWTOOTH</option>
      <option value="3">TRIANGLE</option>
    </select><br>
    LFO speed: <input id="lfo" type="range" min="0.25" max="20" step="0.25" value="3" style="height: 20px; width: 200px;" onInput="if (lfo) lfo.frequency.value = event.target.value;"><br>
    LFO depth: <input id="lfodepth" type="range" min="0.0" max="1.0" step="0.1" value="1.0" style="height: 20px; width: 200px;" onInput="if (lfodepth) lfodepth.gain.value = event.target.value;">
  </div>
  <div id="chorusControls">A basic (monophonic) chorus effect.<br>
    Chorus speed: <input id="cspeed" type="range" min="0.5" max="15" step="0.25" value="3.5" style="height: 20px; width: 200px;" onInput="if (cspeed) cspeed.frequency.value = event.target.value;"><br>
    Chorus delay: <input id="cdelay" type="range" min="0.005" max="0.055" step="0.005" value="0.03" style="height: 20px; width: 200px;" onInput="if (cdelay) cdelay.delayTime.value = event.target.value;"><br>
    Chorus depth: <input id="cdepth" type="range" min="0.0005" max="0.004" step="0.0005" value="0.002" style="height: 20px; width: 200px;" onInput="if (cdepth) cdepth.gain.value = event.target.value;">
  </div>
  <div id="flangeControls">A basic (monophonic) flanging effect.<br>
    Flanger speed: <input id="flspeed" type="range" min="0.05" max="5" step="0.05" value="0.25" style="height: 20px; width: 200px;" onInput="if (flspeed) flspeed.frequency.value = event.target.value;"><br>
    Flanger delay: <input id="fldelay" type="range" min="0.001" max="0.02" step="0.001" value="0.005" style="height: 20px; width: 200px;" onInput="if (fldelay) fldelay.delayTime.value = event.target.value;"><br>
    Flanger depth: <input id="fldepth" type="range" min="0.0005" max="0.005" step="0.00025" value="0.002" style="height: 20px; width: 200px;" onInput="if (fldepth) fldepth.gain.value = event.target.value;"><br>
    Flanger feedback: <input id="flfb" type="range" min="0" max="1" step="0.01" value="0.5" style="height: 20px; width: 200px;" onInput="if (flfb) flfb.gain.value = event.target.value;">
  </div>
  <div id="ringmodControls">A ring modulator.<br>
    Ringmod freq: <input id="rmfreq" type="range" min="9" max="13" step="0.01" value="11" style="height: 20px; width: 200px;" onInput="if (rmod) rmod.frequency.value = Math.pow(2, event.target.value);">
  </div>
  <div id="stereoChorusControls">A stereo chorus effect.<br>
    Chorus speed: <input id="scspeed" type="range" min="0.5" max="15" step="0.25" value="3.5" style="height: 20px; width: 200px;" onInput="if (scspeed) scspeed.frequency.value = event.target.value;"><br>
    Chorus delay: <input id="scdelay" type="range" min="0.005" max="0.055" step="0.005" value="0.03" style="height: 20px; width: 200px;" onInput="if (scldelay) scldelay.delayTime.value = event.target.value;if (scrdelay) scrdelay.delayTime.value = event.target.value;"><br>
    Chorus depth: <input id="scdepth" type="range" min="0.0005" max="0.004" step="0.0005" value="0.002" style="height: 20px; width: 200px;" onInput="if (scldepth) scldepth.gain.value = event.target.value; if (scrdepth) scrdepth.gain.value = -1.0 * event.target.value;">
  </div>
  <div id="flangeControls">A stereo flanging effect.<br>
    Flanger speed: <input id="sflspeed" type="range" min="0.05" max="2" step="0.05" value="0.15" style="height: 20px; width: 200px;" onInput="if (sflspeed) sflspeed.frequency.value = event.target.value;"><br>
    Flanger delay: <input id="sfldelay" type="range" min="0.001" max="0.02" step="0.001" value="0.003" style="height: 20px; width: 200px;" onInput="if (sflldelay) sflldelay.delayTime.value = event.target.value; if (sflrdelay) sflrdelay.delayTime.value = event.target.value;"><br>
    Flanger depth: <input id="sfldepth" type="range" min="0.0005" max="0.02" step="0.00025" value="0.005" style="height: 20px; width: 200px;" onInput="if (sflldepth) sflldepth.gain.value = event.target.value; if (sflrdepth) sflrdepth.gain.value = -1.0 * event.target.value;"><br>
    Flanger feedback: <input id="sflfb" type="range" min="0" max="1" step="0.01" value="0.9" style="height: 20px; width: 200px;" onInput="if (sfllfb) sfllfb.gain.value = event.target.value; if (sflrfb) sflrfb.gain.value = event.target.value;">
  </div>
  <div id="doublerControls">An octave-doubling effect, using sample-accurate delay ramping.<br>
    <!-- TODO: doesn't need to be just octave, should be able to control. -->
  </div>
  <div id="modDelayControls">A delay with a basic chorus effect.<br>
    Delay time: <input id="mdtime" type="range" min="0.01" max="3" step="0.01" value="0.15" style="height: 20px; width: 200px" onInput="if (mdtime) mdtime.delayTime.value = event.target.value;"><br>
    Regen: <input id="mdfeedback" type="range" min="0.0" max="1.0" step="0.01" value="0.5" style="height: 20px; width: 200px;" 
    onInput="if (mdfeedback) mdfeedback.gain.value = event.target.value;"><br>

    Chorus speed: <input id="mdspeed" type="range" min="0.5" max="15" step="0.25" value="3.5" style="height: 20px; width: 200px;" onInput="if (mdspeed) mdspeed.frequency.value = event.target.value;"><br>
    Chorus delay: <input id="mddelay" type="range" min="0.005" max="0.055" step="0.005" value="0.03" style="height: 20px; width: 200px;" onInput="if (mddelay) mddelay.delayTime.value = event.target.value;"><br>
    Chorus depth: <input id="mddepth" type="range" min="0.0005" max="0.004" step="0.0005" value="0.002" style="height: 20px; width: 200px;" onInput="if (mddepth) mddepth.gain.value = event.target.value;">
  </div>
  <div id="pingpongControls">A ping-pong delay - bounces stereo channels.  Most noticeable with mono signal.<br>
  </div>
  <div id="lfowahControls">An LFO-controlled low-pass filter.<br>
    LFO type: 
    <select id="lplfotype" onchange="if (lplfo) lplfo.type = parseInt(event.target.value);">
      <option selected="selected" value="0">SIN</option>
      <option value="1">SQUARE</option>
      <option value="2">SAWTOOTH</option>
      <option value="3">TRIANGLE</option>
    </select><br>
    LFO speed: <input id="lplfo" type="range" min="0.25" max="20" step="0.25" value="3" style="height: 20px; width: 200px;" onInput="if (lplfo) lplfo.frequency.value = event.target.value;"><br>
    LFO depth: <input id="lplfodepth" type="range" min="0.0" max="1.0" step="0.1" value="1.0" style="height: 20px; width: 200px;" onInput="if (lplfodepth) lplfodepth.gain.value = 2500 * event.target.value;">
    Filter Q: <input id="lplfoq" type="range" min="0.0" max="20.0" step="0.5" value="3.0" style="height: 20px; width: 200px;" onInput="if (lplfofilter) lplfofilter.Q.value = event.target.value;">
  </div>
  <div id="envfollowerControls">An envelope follower.  Just for testing.<br>
  </div>
  <div id="autowahControls">An autowah effect.<br>
    Envelope follower filter frequency: <input id="awEF" type="range" min="0.25" max="20" step="0.25" value="10" style="height: 20px; width: 200px;" onInput="if (awFollower) awFollower.frequency.value = event.target.value;"><br>
    Filter depth (log): <input id="lfo" type="range" min="0" max="4" step="0.1" value="3.5" style="height: 20px; width: 200px;" onInput="if (awDepth) awDepth.gain.value = Math.pow(2,10+parseFloat(event.target.value));"><br>
    Filter Q: <input id="awQ" type="range" min="0.0" max="20.0" step="0.1" value="5.0" style="height: 20px; width: 200px;" onInput="if (awFilter) awFilter.Q.value = event.target.value;">
  </div>
  <div id="noisegateControls">A cheaply-implemented noise gate.  Due to how it's implemented, it WILL have chattering problems.<br>
    Envelope follower filter frequency: <input id="ngEF" type="range" min="0.25" max="20" step="0.25" value="10" style="height: 20px; width: 200px;" onInput="if (ngFollower) ngFollower.frequency.value = event.target.value;"><br>
    Floor: <input id="ngFloor" type="range" min="0.0" max="0.1" step="0.001" value="0.01" style="height: 20px; width: 200px;" onInput="if (ngGate)    ngGate.curve = generateNoiseFloorCurve(event.target.value);">
  </div>
  <div id="wahbassControls">Octave-down + wah + ping-pong.<br>
  </div>
  <div id="wahbassControls">Wah + distortion + stereo chorus.<br>
  </div>

</div>
    </div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-35593052-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

  </body>

</html>